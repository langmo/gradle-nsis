plugins {
    // Apply the java plugin to add support for Java
    id 'java'
    // Apply the distribution plugin.
    id 'distribution'
	// Apply the launch4j plugin to add support for generating EXE startup files
	id 'edu.sc.seis.launch4j' version '2.4.6'
	// Apply the gradlensis plugin to add support for generating Windows installers
	id "com.github.langmo.gradlensis" version "0.1.0"
}
allprojects {
    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.7'
        targetCompatibility = '1.7'
    } 
}
jar {
  manifest {
    attributes(
      'Main-Class': 'com.github.langmo.gradlensis.examples.extended.Example'
    )
  }
}

// Empty task to prevent unnecessary copying of libs by launch4j
task emptyTask{
}


// Configuration to create the EXE startup files using launch4j.
// We will create two EXE files, one for 32bit and one for 64 bit.
// Here, we only define the common properties of both files.
// See https://github.com/TheBoegl/gradle-launch4j for details.
launch4j {
   dontWrapJar = true
   headerType = 'gui'
   jar = "lib/extended.jar"
   errTitle = 'Extended gradlensis Example'
   copyConfigurable = rootProject.tasks.emptyTask.outputs.files
   
   cmdLine = ""
   chdir = '.'
   priority = 'normal'
   downloadUrl = "http://java.com/download"
   supportUrl = 'http://www.youscope.org'
   stayAlive = false
   restartOnCrash = false
   manifest = ""
   classpath = ['lib/extended.jar']
   mainClassName = "com.github.langmo.gradlensis.examples.extended.Example"
   
   bundledJre64Bit = false
   bundledJreAsFallback = false
   jreMinVersion = "1.7.0" 
}
// Task to create the 64 bit version of startup EXE
createExe {
    outfile = 'Example64.exe'
    jreRuntimeBits = "64"
}

// Task to create the 32 bit version of startup EXE
task createExe32(type: edu.sc.seis.launch4j.tasks.Launch4jLibraryTask) {
    outfile = 'Example32.exe'
    jreRuntimeBits = "32"
}

// Create build folder with all necessary files
distributions {
    nsis {
		distributionBaseName = 'nsis'
		contents {
			from(createExe)
			{
				into ''
			}
			from(createExe32)
			{
				into ''
			}
			project(':') {
				from(jar) {
					into 'lib'
				}
			}
			from("${rootProject.projectDir}/LICENSE")
			{
				into ''
			}
		}
	}
}

nsis {
	configuration = file("${rootProject.projectDir}/extended.nsi")
	runIn =  file("${rootProject.buildDir}/install/nsis/")
}
createInstaller {
	variables = ['WIN64':'True']
}
task createInstaller32(type: com.github.langmo.gradlensis.GradleNsisTask) {
	variables = ['WIN32':'True']
}
createInstaller.dependsOn installNsisDist
createInstaller32.dependsOn installNsisDist
task createInstallers {
	dependsOn ":createInstaller32"
	dependsOn ":createInstaller"
}
def NSIS_GROUP = 'nsis'
createInstaller32.group = createInstaller.group
createInstaller32.description = createInstaller.description
createInstallers.group = createInstaller.group
createInstallers.description = "Creates both the 32bit and the 64bit NSIS installers"